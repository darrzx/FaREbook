package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/google/uuid"
	"github.com/timothydarren/WebTY/graph/model"
	"gorm.io/gorm"
)

// CreateLike is the resolver for the createLike field.
func (r *mutationResolver) CreateLike(ctx context.Context, inputLikePost model.NewLikePost) (*model.LikePost, error) {
	var like *model.LikePost

	if err := r.DB.First(&like, "postid = ? AND userid = ?", inputLikePost.Postid, inputLikePost.Userid).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			// Post like does not exist, so create a new one.
			newLikePost := &model.LikePost{
				ID:       uuid.NewString(),
				Postid:   inputLikePost.Postid,
				Userid:   inputLikePost.Userid,
				Username: inputLikePost.Username,
				IsLike:   true,
			}
			if err := r.DB.Create(newLikePost).Error; err != nil {
				return nil, err
			}
			return newLikePost, nil
		}
		// Error occurred while querying the database.
		return nil, err
	}

	like.IsLike = !inputLikePost.IsLike

	if err := r.DB.Save(&like).Error; err != nil {
		return nil, err
	}

	return like, nil
}

// CheckLikeByPost is the resolver for the checkLikeByPost field.
func (r *queryResolver) CheckLikeByPost(ctx context.Context, postid string, userid string) (bool, error) {
	var like model.LikePost
	err := r.DB.Model(&like).
		Where("postid = ?", postid).
		Where("userid = ?", userid).
		First(&like).Error

	if err != nil {
		return false, nil
	}

	return like.IsLike, nil
}

// GetAllLike is the resolver for the getAllLike field.
func (r *queryResolver) GetAllLike(ctx context.Context) ([]*model.LikePost, error) {
	var likes []*model.LikePost
	return likes, r.DB.Find(&likes).Error
}
