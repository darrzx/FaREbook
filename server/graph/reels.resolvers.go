package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/timothydarren/WebTY/graph/model"
)

// CreateReels is the resolver for the createReels field.
func (r *mutationResolver) CreateReels(ctx context.Context, inputReels model.NewReels) (*model.Reels, error) {
	reels := &model.Reels{
		ID:           uuid.NewString(),
		Userid:       inputReels.Userid,
		Username:     inputReels.Username,
		Video:        inputReels.Video,
		Text:         inputReels.Text,
		Date:         time.Now().Format("2006-01-02"),
		Commentcount: 0,
	}
	return reels, r.DB.Save(&reels).Error
}

// CreateCommentReels is the resolver for the createCommentReels field.
func (r *mutationResolver) CreateCommentReels(ctx context.Context, inputCommentReels model.NewCommentReels) (*model.CommentReels, error) {
	commentReels := &model.CommentReels{
		ID:       uuid.NewString(),
		Reelsid:  inputCommentReels.Reelsid,
		Userid:   inputCommentReels.Userid,
		Username: inputCommentReels.Username,
		Comment:  inputCommentReels.Comment,
		Date:     time.Now().Format("2006-01-02"),
	}
	return commentReels, r.DB.Save(&commentReels).Error
}

// GetReels is the resolver for the getReels field.
func (r *queryResolver) GetReels(ctx context.Context, id string) (*model.Reels, error) {
	panic(fmt.Errorf("not implemented: GetReels - getReels"))
}

// GetAllReels is the resolver for the getAllReels field.
func (r *queryResolver) GetAllReels(ctx context.Context) ([]*model.Reels, error) {
	var reels []*model.Reels
	// return reels, r.DB.Find(&reels).Error

	if err := r.DB.Find(&reels).Error; err != nil {
		return nil, err
	}

	fetchreels := make([]*model.Reels, 0, len(reels))

	for _, reel := range reels {
		fetchReel := &model.Reels{
			ID:           reel.ID,
			Userid:       reel.Userid,
			Username:     reel.Username,
			Video:        reel.Video,
			Text:         reel.Text,
			Date:         reel.Date,
			Commentcount: 0,
		}

		var commentcount int64
		if err := r.DB.Model(&model.CommentReels{}).Where("reelsid = ?", reel.ID).Count(&commentcount).Error; err != nil {
			return nil, err
		}

		fetchReel.Commentcount = int(commentcount)

		fetchreels = append(fetchreels, fetchReel)
	}

	return fetchreels, nil
}

// GetAllReelsByUserID is the resolver for the getAllReelsByUserId field.
func (r *queryResolver) GetAllReelsByUserID(ctx context.Context, userid string) ([]*model.Reels, error) {
	var reels []*model.Reels
	return reels, r.DB.Where("userid = ?", userid).Find(&reels).Error
}

// GetAllCommentByReelsID is the resolver for the getAllCommentByReelsId field.
func (r *queryResolver) GetAllCommentByReelsID(ctx context.Context, id string) ([]*model.CommentReels, error) {
	var comments []*model.CommentReels
	return comments, r.DB.Where("reelsid = ?", id).Find(&comments).Error
}
