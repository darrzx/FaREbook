package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/timothydarren/WebTY/graph/model"
	"github.com/timothydarren/WebTY/service"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, inputUser model.NewUser) (*model.User, error) {
	password, err := model.HashPassword(inputUser.Password)

	if err != nil {
		return nil, err
	}

	user := &model.User{
		ID:         uuid.NewString(),
		Firstname:  inputUser.Firstname,
		Surname:    inputUser.Surname,
		Email:      inputUser.Email,
		Dob:        inputUser.Dob,
		Gender:     inputUser.Gender,
		Password:   password,
		Profilepic: "https://res.cloudinary.com/dnl7josxn/image/upload/v1692692580/userIcon_hct8am.svg",
		IsActive:   false,
	}
	return user, r.DB.Save(&user).Error
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, inputUser model.NewUser) (*model.User, error) {
	var user *model.User
	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}
	user.Firstname = inputUser.Firstname
	user.Surname = inputUser.Surname
	user.Email = inputUser.Email
	user.Dob = inputUser.Dob
	user.Gender = inputUser.Gender
	user.Password = inputUser.Password
	user.Profilepic = inputUser.Profilepic
	user.IsActive = inputUser.IsActive
	return user, r.DB.Save(&user).Error
}

// UpdateUserProfilepic is the resolver for the updateUserProfilepic field.
func (r *mutationResolver) UpdateUserProfilepic(ctx context.Context, id string, profilepic string) (*model.User, error) {
	var user *model.User
	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}
	user.Profilepic = profilepic
	return user, r.DB.Save(&user).Error
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.User, error) {
	var user *model.User
	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}
	return user, r.DB.Delete(&user).Error
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (string, error) {
	return service.UserLogin(ctx, email, password)
}

// VerifyAccount is the resolver for the verifyAccount field.
func (r *mutationResolver) VerifyAccount(ctx context.Context, id string) (bool, error) {
	var user *model.User
	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return false, err
	}
	user.IsActive = true
	return true, r.DB.Save(&user).Error
}

// GetUserIDByToken is the resolver for the getUserIdByToken field.
func (r *mutationResolver) GetUserIDByToken(ctx context.Context, token string) (*model.User, error) {
	parsedToken, err := service.JwtValidate(ctx, token)
	if err != nil {
		return nil, err
	}

	if claims, ok := parsedToken.Claims.(*service.JwtCustom); ok && parsedToken.Valid {
		userID := claims.ID
		// fmt.Println(userID)

		user, err := r.Query().GetUser(ctx, userID)
		if err != nil {
			return nil, err
		}

		return user, nil
	}

	return nil, fmt.Errorf("invalid JWT token")
}

// CheckOldAndNewPassword is the resolver for the checkOldAndNewPassword field.
func (r *mutationResolver) CheckOldAndNewPassword(ctx context.Context, id string, password string) (bool, error) {
	return service.CheckPassword(ctx, id, password)
}

// ResetPassword is the resolver for the resetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, id string, password string) (*model.User, error) {
	passwordHash, err := model.HashPassword(password)

	if err != nil {
		return nil, err
	}

	var user *model.User
	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}

	user.Password = passwordHash
	return user, r.DB.Save(&user).Error
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	var user *model.User
	return user, r.DB.First(&user, "id = ?", id).Error
}

// GetAllUser is the resolver for the getAllUser field.
func (r *queryResolver) GetAllUser(ctx context.Context) ([]*model.User, error) {
	var users []*model.User
	return users, r.DB.Find(&users).Error
}

// FindAccount is the resolver for the findAccount field.
func (r *queryResolver) FindAccount(ctx context.Context, email string) (*model.User, error) {
	var user *model.User
	return user, r.DB.First(&user, "email = ?", email).Error
}

// GetAllUserByName is the resolver for the getAllUserByName field.
func (r *queryResolver) GetAllUserByName(ctx context.Context, name *string) ([]*model.User, error) {
	var users []*model.User
	query := r.DB
	if name != nil && *name != "" {
		query = query.Where("firstname ILIKE ? OR surname ILIKE ? OR CONCAT(firstname, ' ', surname) ILIKE ?", "%"+*name+"%", "%"+*name+"%", "%"+*name+"%")
	}
	if err := query.Find(&users).Error; err != nil {
		return nil, err
	}
	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
