package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/google/uuid"
	"github.com/timothydarren/WebTY/graph/model"
	"gorm.io/gorm"
)

// CreateLikeComment is the resolver for the createLikeComment field.
func (r *mutationResolver) CreateLikeComment(ctx context.Context, inputLikeComment model.NewLikeComment) (*model.LikeComment, error) {
	var like *model.LikeComment

	if err := r.DB.First(&like, "commentid = ? AND userid = ?", inputLikeComment.Commentid, inputLikeComment.Userid).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			// Post like does not exist, so create a new one.
			newLikeComment := &model.LikeComment{
				ID:        uuid.NewString(),
				Commentid: inputLikeComment.Commentid,
				Userid:    inputLikeComment.Userid,
				Username:  inputLikeComment.Username,
				IsLike:    true,
			}
			if err := r.DB.Create(newLikeComment).Error; err != nil {
				return nil, err
			}
			return newLikeComment, nil
		}
		// Error occurred while querying the database.
		return nil, err
	}

	like.IsLike = !inputLikeComment.IsLike

	if err := r.DB.Save(&like).Error; err != nil {
		return nil, err
	}

	return like, nil
}

// CheckLikeByComment is the resolver for the checkLikeByComment field.
func (r *queryResolver) CheckLikeByComment(ctx context.Context, commentid string, userid string) (bool, error) {
	var like model.LikeComment
	err := r.DB.Model(&like).
		Where("commentid = ?", commentid).
		Where("userid = ?", userid).
		First(&like).Error

	if err != nil {
		return false, nil
	}

	return like.IsLike, nil
}

// GetAllLikeComment is the resolver for the getAllLikeComment field.
func (r *queryResolver) GetAllLikeComment(ctx context.Context) ([]*model.LikeComment, error) {
	var likes []*model.LikeComment
	return likes, r.DB.Find(&likes).Error
}
