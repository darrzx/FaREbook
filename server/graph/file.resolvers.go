package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/timothydarren/WebTY/graph/model"
)

// CreateFile is the resolver for the createFile field.
func (r *mutationResolver) CreateFile(ctx context.Context, inputFile model.NewFile) (*model.File, error) {
	var existingFiles []model.File
	r.DB.Where("filename LIKE ?", "%"+inputFile.Filename+"%").Find(&existingFiles)

	filename := inputFile.Filename
	count := 0
	for {
		found := false
		for _, existingFile := range existingFiles {
			if existingFile.Filename == filename {
				found = true
				count++
			}
		}
		if !found {
			break
		}
		filename = fmt.Sprintf("%s (%d)", inputFile.Filename, count)
	}

	file := &model.File{
		ID:        uuid.NewString(),
		Groupid:   inputFile.Groupid,
		Filename:  filename,
		Mediaurl:  inputFile.Mediaurl,
		Userid:    inputFile.Userid,
		Ownername: inputFile.Ownername,
		Date:      time.Now().Format("2006-01-02 15:04:05"),
		Filetype:  inputFile.Filetype,
	}
	return file, r.DB.Save(&file).Error
}

// GetFile is the resolver for the getFile field.
func (r *queryResolver) GetFile(ctx context.Context, id string) (*model.File, error) {
	panic(fmt.Errorf("not implemented: GetFile - getFile"))
}

// GetAllFileByGroupID is the resolver for the getAllFileByGroupId field.
func (r *queryResolver) GetAllFileByGroupID(ctx context.Context, groupid string, name *string) ([]*model.File, error) {
	query := r.DB.Where("groupid = ?", groupid)

	if name != nil && *name != "" {
		query = query.Where("filename ILIKE ?", "%"+*name+"%")
	}

	var files []*model.File
	return files, query.Find(&files).Error
}
