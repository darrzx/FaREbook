package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/timothydarren/WebTY/graph/model"
)

// CreateMessage is the resolver for the createMessage field.
func (r *mutationResolver) CreateMessage(ctx context.Context, inputMessage model.NewMessage) (bool, error) {
	message := &model.Message{
		ID:             uuid.NewString(),
		Conversationid: inputMessage.Conversationid,
		Senderid:       inputMessage.Senderid,
		Content:        inputMessage.Content,
		Date:           time.Now().Format("2006-01-02 15:04:05"),
	}

	if err := r.DB.Save(&message).Error; err != nil {
		return false, err
	}

	for _, conn := range r.Conns {
		fmt.Println(conn)
		err := conn.WriteJSON(&message)
		if err != nil {
			fmt.Println(err)
		}
	}
	return true, nil
}

// GetAllMessageByConversationID is the resolver for the getAllMessageByConversationId field.
func (r *queryResolver) GetAllMessageByConversationID(ctx context.Context, conversationid *string) ([]*model.Message, error) {
	var messages []*model.Message
	if err := r.DB.Where("conversationid = ?", conversationid).
		Order("date ASC").
		Find(&messages).Error; err != nil {
		return nil, err
	}
	return messages, nil
}
